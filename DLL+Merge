#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
    struct node* prev;
};

void del_beg(struct node **headref) {
    struct node *temp = *headref;
    if (temp == NULL) {
        printf("List is empty\n");
        return;
    }
    *headref = temp->next;
    if (*headref != NULL) {
        (*headref)->prev = NULL;
    }
    free(temp);
}

void del_end(struct node **headref) {
    struct node *temp = *headref;
    if (temp == NULL) {
        printf("List is empty\n");
        return;
    }
    while (temp->next != NULL) {
        temp = temp->next;
    }
    if (temp->prev != NULL) {
        temp->prev->next = NULL;
    } else {
        *headref = NULL;
    }
    free(temp);
}

void del_rand(struct node **headref) {
    struct node *temp = *headref;
    int pos;
    printf("Enter the position of node to be deleted:\n");
    scanf("%d", &pos);

    if (temp == NULL) {
        printf("List is empty\n");
        return;
    }
    for (int i = 1; temp != NULL && i < pos; i++) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Invalid position\n");
        return;
    }

    if (temp->prev != NULL)
        temp->prev->next = temp->next;
    else
        *headref = temp->next;

    if (temp->next != NULL)
        temp->next->prev = temp->prev;

    free(temp);
}

void display(struct node **headRef) {
    struct node *temp = *headRef;
    printf("Linked list: \n");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void ins_rand(struct node **headRef) {
    struct node *newNode, *temp = *headRef;
    int pos;
    newNode = (struct node*)malloc(sizeof(struct node));

    printf("Enter the data of new node:\n");
    scanf("%d", &newNode->data);
    newNode->next = newNode->prev = NULL;

    printf("Enter the position of new node:\n");
    scanf("%d", &pos);

    if (pos == 1) {
        newNode->next = *headRef;
        if (*headRef != NULL)
            (*headRef)->prev = newNode;
        *headRef = newNode;
        return;
    }

    for (int i = 1; temp != NULL && i < pos - 1; i++) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Invalid position\n");
        free(newNode);
        return;
    }

    newNode->next = temp->next;
    newNode->prev = temp;

    if (temp->next != NULL)
        temp->next->prev = newNode;
    temp->next = newNode;
}

void ins_beg(struct node **headRef) {
    struct node *newNode = (struct node*)malloc(sizeof(struct node));
    printf("Enter the data of new node:\n");
    scanf("%d", &newNode->data);
    newNode->prev = NULL;
    newNode->next = *headRef;

    if (*headRef != NULL)
        (*headRef)->prev = newNode;
    *headRef = newNode;
}

void ins_end(struct node **headRef) {
    struct node *newNode = (struct node*)malloc(sizeof(struct node));
    printf("Enter the data of new node:\n");
    scanf("%d", &newNode->data);
    newNode->next = NULL;

    if (*headRef == NULL) {
        newNode->prev = NULL;
        *headRef = newNode;
        return;
    }

    struct node *temp = *headRef;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
}

struct node* merge(struct node* a, struct node* b) {
    if (a == NULL) return b;
    if (b == NULL) return a;

    struct node* result = NULL;

    if (a->data <= b->data) {
        result = a;
        result->next = merge(a->next, b);
        if (result->next != NULL)
            result->next->prev = result;
        result->prev = NULL;
    } else {
        result = b;
        result->next = merge(a, b->next);
        if (result->next != NULL)
            result->next->prev = result;
        result->prev = NULL;
    }
    return result;
}

void split(struct node* source, struct node** frontRef, struct node** backRef) {
    struct node* fast = source->next;
    struct node* slow = source;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *frontRef = source;
    *backRef = slow->next;
    if (*backRef != NULL)
        (*backRef)->prev = NULL;
    slow->next = NULL;
}

void mergeSort(struct node** headRef) {
    struct node* head = *headRef;
    if (!head || !head->next) return;

    struct node *a, *b;
    split(head, &a, &b);

    mergeSort(&a);
    mergeSort(&b);

    *headRef = merge(a, b);
}

int main() {
    struct node *head = NULL, *newNode, *temp;
    int choice;
    
    printf("Enter the no. of nodes you want to enter:\n");
    scanf("%d", &choice);
    

    while (choice) {
        newNode = (struct node*)malloc(sizeof(struct node));
        printf("Enter data: \n");
        scanf("%d", &newNode->data);
        newNode->next = NULL;
        newNode->prev = NULL;

        if (head == NULL) {
            head = temp = newNode;
        } else {
            temp->next = newNode;
            newNode->prev = temp;
            temp = newNode;
        }

        choice--;
    }

    int x, k = 1;
    while (k) {
        printf("\n1: Insert at beginning\n2: Insert at random position\n3: Insert at end\n");
        printf("4: Delete from beginning\n5: Delete from end\n6: Delete from random position\n");
        printf("7: Display list\n8: Sort list\n");
        scanf("%d", &x);
        switch (x) {
            case 1: ins_beg(&head); break;
            case 2: ins_rand(&head); break;
            case 3: ins_end(&head); break;
            case 4: del_beg(&head); break;
            case 5: del_end(&head); break;
            case 6: del_rand(&head); break;
            case 7: display(&head); break;
            case 8:
                mergeSort(&head);
                printf("Sorted list:\n");
                display(&head);
                break;
            default:
                printf("Invalid choice\n");
                break;
        }
        printf("Do you want to continue (0/1)?\n");
        scanf("%d", &k);
    }
    return 0;
}
